  django 简单使用

1、新建django 项目
  django-admin startproject projectname

2、启动django项目
  python manage.py runserver

3、新建app
  django-admin startapp appname
  注：需要在project目录下运行
  新建完app后，需要在settings里加入app声明

4、新建数据表
   在app里定义了model后，需要在数据库里建表
   python manage.py migrate   # 创建表结构
   python manage.py makemigrations TestModel  # 让 Django 知道我们在我们的模型有一些变更
   python manage.py migrate TestModel   # 创建表结构

5、前端页面使用
  静态文件存放在static文件夹，如：js,css,image
  html模版页面存放在templates文件夹，如：*.html。
  
  在模版里使用静态文件样例：
  {% load static %}
  就可以使用 {% static ‘css/a.css’ %}  来拼接获取静态文件。

  模版使用需要在settings里的Template的dir里加入templates路径。

6、url，view构造
  构建一个url页面，
  首先需要定义相应的view，定义过程为声明一个继承View的类，重写里面的get方法，加入后台逻辑。
  然后需要在urls.py里声明一个url页面，并指定它使用的那个view。

  例子：首页构造
  Urls.py
  from search.views import IndexView
  url(r’^$’, IndexView.as_View(), name=‘index’), 
  
  search/view.py
  from django.shortcuts import render
  from django.views.generic.base import View
  class IndexView(View):
      def get(self, request):
          return render(request, ‘index.html’)


7、django前后端数据传递与使用
   11、怎么把后台的变量传入html的.
      an: A 这是在urls.py 里定义url时，有声明该url的name属性为suggest，才让前端知道的。
	     如：url(r'^suggest/$', SuggestView.as_view(), name="suggest")
                使用： {% url ‘suggest’ %}
          B 在setting.py 里定义变量也可以使用。不过，应该是固定使用。需要查看文档。
             如： STATIC_URL = '/static/'
		STATICFILES_DIRS = [
    			os.path.join(BASE_DIR, "static")
		]
                使用：{% load staticfiles %}
                     {% static 'css/index.css' %} 这样拼接字符串
          C 在views.py 里返回前端request结果时，可以附带data，以字典的形式。
	     如：render(request, “**.html”, {“key_words”:key_words})
                使用：{{ key_words }}
   22、后台又时怎么从请求里获取前端传递的参数 如：a = request.GET.get(’s’, ‘’)
      A: 这是以request.GET参数当作字典来处理的啊！
   
8、models构造
  在models.py里创建一个class，也就是表名。
  然后定义class的成员变量，并指定类型。相当于数据表的字段。
  eg：
  class Blog(models.Model):
      title = models.CharField(max_length=32, default="Title")
      content = models.TextField(null=true)
      create_time = models.DateTimeField(null=true) 
  定义好models后，可以使用命令方式自动建好数据表。
  python manage.py migrate //建系统默认表admin等
  python manage.py makemigrations blog //建立表的映射关系
  python manage.py migrate //建立数据表

9、views中读写表内容
  blog = models.Blog.objects.get(pk=id) //获取某一行数据
  blogs = models.Blog.objects.all()  //获取全部行数据
  models.Blog.objects.create(title=title,content=content,create_time=create_time) //创建某一行数据
  blog.title = newTitle
  blog.content = newContent
  blog.save()//更新某一行数据

10、django url传递参数给view
  URL可以通过named group方式传递指定参数，
  语法为： (?P<name>pattern)，name 可以理解为所要传递的参数的名称，pattern代表所要匹配的模式。
  例如，url(r'^blog/(?P<blog_id>\d+)/$', BlogView.as_view(), name="blog"), 
  注意这里的（）以及/$。

11、view 中读取request里的数据
   a = request.POST.get("key","default value")
  
   
12、后台管理系统admin
   1、注册超级用户：python manage.py createsuperuser
   2、将app的models添加到admin的管理页面：
      admin.py   
      from blog.models import Blog, User
      admin.site.register(Blog)
      admin.site.register(User)
   3、设置models的title可见
      models.py
      class Blog(models.Model):
          def __unicode__(self):
              return self.title 
  
  









