  django 简单bug记录
 
   今天在使用django搭建博客网站时，碰到405错误。真的是一个大坑！！！
构造url的相应函数，有两种。
1、使用官方提供的使用类的声明来写响应事件。
url(r'^blog_edit/$', BlogSaveView.as_view(), name="blog_edit")
class BlogSaveView(View):
    def get(self, request):
        title = request.POST.get("title","TITLE")
        content = request.POST.get("content","")
        blog_id = request.POST.get("blog_id","0")
        if blog_id == '0':
            models.Blog.objects.create(titile=title, content=content,create_time=datetime.now())
            blogs = models.Blog.objects.all()
            return render(request, "index.html", {"blogs": blogs})
        blog = models.Blog.objects.get(pk=blog_id)
        blog.titile = title
        blog.content = content
        blog.create_time = datetime.now()
        blog.save()
        # return render(request, "blog.html", {"blog": blog})
        blogs = models.Blog.objects.all()
        return render(request, "index.html", {"blogs": blogs})


2、第二种直接使用函数来构建url响应事件
url(r'^blog_edit/$',blog.views.edit_action, name="blog_edit")
def edit_action(request):
    title = request.POST.get("title", "TITLE")
    content = request.POST.get("content", "")
    blog_id = request.POST.get("blog_id", "0")
    if blog_id == '0':
        models.Blog.objects.create(titile=title, content=content, create_time=datetime.now())
        blogs = models.Blog.objects.all()
        return render(request, "index.html", {"blogs": blogs})
    blog = models.Blog.objects.get(pk=blog_id)
    blog.titile = title
    blog.content = content
    blog.create_time = datetime.now()
    blog.save()
    # return render(request, "blog.html", {"blog": blog})
    blogs = models.Blog.objects.all()
    return render(request, "index.html", {"blogs": blogs})


结果：两种方式的响应内容是一样的，但是在真正浏览器里访问时。第一种方式，会得到一个405的错误！！！！！
      建议以后都使用方式二吧。。。

3、setting.py里的Debug关了，会发生错误？
   CommandError: You must set settings.ALLOWED_HOSTS if DEBUG is False.

4、django 表单提交，会默认发一个当前页面的请求！！！
   这是django默认机制，如果有指定action 对象，就不会发送当前页面啦。。
   如果，不需要页面默认发送请求，而是使用jQuery发送ajax请求。
   那么我们可以指定这样一个空表达式javascript:void(0)

5、自定义过滤器，进行标签替换，解决django换行和空格的显示问题
   在app目录下，创建templatetags文件夹。注：文件名必须是这样的。
   在templatetags文件夹下创建__init__.py文件。
   在templatetags文件夹下创建我们自定义的过滤器函数的py文件。如：myfilter.py
    myfilter.py
    #-*- coding: utf-8 -*- 
    from django.template import Library                         
    register = Library()                            
                                                
    @register.filter                                
    def replaceTags(content):                       
        content = content.replace(" ", "&nbsp;")  # 
        content = content.replace("\n", "<br/>")  # 
        return content                              
                                                
    register.filter('replaceTags', replaceTags)     
  在html中使用过滤器
   {% load myfilter %}
  
   {% autoescape off %}{{ content | replaceTags }}{% endautoescape %}
   注意：这里必须加上autoescape。不然django就直接显示<br/>字符串啦！
  
  









